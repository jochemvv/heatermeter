buildscript {
	ext {
		springBootVersion = '2.3.2.RELEASE'
	}
	repositories {
		mavenCentral()
		gradlePluginPortal()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id "com.github.node-gradle.node" version "2.2.4"
	id "org.openapi.generator" version "4.3.1"
}

repositories {
	maven { url "https://dl.bintray.com/micronaut/core-releases-local" }
	jcenter()
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'nl.tabitsolutions'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 8
targetCompatibility = 8

repositories {
	mavenCentral()
}

ext {
	springBootAdminVersion = '2.1.1'
}

ext {
	micronautVersion = "2.0.0"
	micronautSpringVersion = "2.0.0"
}

dependencies {
	annotationProcessor "io.micronaut:micronaut-inject-java"
	annotationProcessor "io.micronaut:micronaut-validation"
	annotationProcessor "io.micronaut.configuration:micronaut-openapi"
	annotationProcessor "io.micronaut.spring:micronaut-spring-boot-annotation:$micronautSpringVersion"
	annotationProcessor "io.micronaut.spring:micronaut-spring-web-annotation:$micronautSpringVersion"

	implementation("io.swagger.core.v3:swagger-annotations")

	implementation("io.micronaut:micronaut-inject")

	implementation("io.micronaut:micronaut-http-server")
	implementation("io.micronaut:micronaut-http-server-netty")

	implementation("io.micronaut.spring:micronaut-spring-web:$micronautSpringVersion")
	implementation("io.micronaut.views:micronaut-views-thymeleaf")

	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation('org.springframework.boot:spring-boot-starter-aop')
	implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('de.codecentric:spring-boot-admin-starter-client')
	implementation('de.codecentric:spring-boot-admin-starter-server')



	runtimeOnly('org.springframework.boot:spring-boot-devtools')

	implementation('com.pi4j:pi4j-parent:1.2')
	implementation('com.pi4j:pi4j-core:1.2')
	implementation('com.pi4j:pi4j-device:1.2')
	implementation('org.sputnikdev:bluetooth-manager-tinyb:1.3.3')
	implementation('org.sputnikdev:bluetooth-manager:1.5.3')

	implementation('org.springframework.boot:spring-boot-configuration-processor')
	implementation('org.projectlombok:lombok')

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile("io.micronaut:micronaut-http-client")
	testCompile("io.micronaut.test:micronaut-test-junit5:1.0.0.RC2")
	testCompile "io.micronaut:micronaut-inject-java"

	testCompile("io.micronaut:micronaut-http-client")
	testCompile("io.micronaut.test:micronaut-test-junit5:1.0.0.RC2")
	testCompile "io.micronaut:micronaut-inject-java"
}

dependencyManagement {
	imports {
		mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
		mavenBom "io.micronaut:micronaut-bom:$micronautVersion"
	}
}

task buildTypeScriptClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
	generatorName = "typescript-axios"
	inputSpec = new File("${buildDir}", "classes/java/main/META-INF/swagger/heatermeter-api-0.01-DRAFT.yml").absoluteFile.toString()
	outputDir = new File("${projectDir}", "src/main/typescript/src/generated").absoluteFile.toString()
}

// Read more about how to configure the plugin from
// https://github.com/srs/gradle-node-plugin/blob/master/docs/node.md
node {
	version = "12.18.3"
	download = true

	// Set the work directory for unpacking node
	workDir = file("${project.buildDir}/nodejs")

	// Set the work directory for NPM
	npmWorkDir = file("${project.buildDir}/npm")
}

task appYarnInstall(type: YarnTask) {
	description = "Installs Yall dependencies from package.json"
	workingDir = file("${project.projectDir}/src/main/typescript")
	args = ["install"]
}

task appYarnBuild(type: YarnTask) {
	environment = [PUBLIC_URL: '/ui']
	description = "Builds production version of the webapp"
	workingDir = file("${project.projectDir}/src/main/typescript")
	args = ["build"]
}

task copyWebApp(type: Copy) {
	from 'src/main/typescript/build'
	into 'build/resources/main/static/.'
}

//appYarnInstall.dependsOn buildTypeScriptClient
//appYarnBuild.dependsOn appYarnInstall
//copyWebApp.dependsOn appYarnBuild
//build.dependsOn copyWebApp

compileJava.options.compilerArgs += '-parameters'
compileTestJava.options.compilerArgs += '-parameters'
